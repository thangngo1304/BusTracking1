#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusTracking
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LOCATION_BUS")]
	public partial class DataClassesBusTrackingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBUS(BUS instance);
    partial void UpdateBUS(BUS instance);
    partial void DeleteBUS(BUS instance);
    partial void InsertTRIP_HISTORY(TRIP_HISTORY instance);
    partial void UpdateTRIP_HISTORY(TRIP_HISTORY instance);
    partial void DeleteTRIP_HISTORY(TRIP_HISTORY instance);
    partial void InsertCOORDINATE(COORDINATE instance);
    partial void UpdateCOORDINATE(COORDINATE instance);
    partial void DeleteCOORDINATE(COORDINATE instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertLINE(LINE instance);
    partial void UpdateLINE(LINE instance);
    partial void DeleteLINE(LINE instance);
    partial void InsertROAD(ROAD instance);
    partial void UpdateROAD(ROAD instance);
    partial void DeleteROAD(ROAD instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    partial void InsertTRIP(TRIP instance);
    partial void UpdateTRIP(TRIP instance);
    partial void DeleteTRIP(TRIP instance);
    partial void InsertTICKET(TICKET instance);
    partial void UpdateTICKET(TICKET instance);
    partial void DeleteTICKET(TICKET instance);
    #endregion
		
		public DataClassesBusTrackingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LOCATION_BUSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBusTrackingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBusTrackingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBusTrackingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBusTrackingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BUS> BUS
		{
			get
			{
				return this.GetTable<BUS>();
			}
		}
		
		public System.Data.Linq.Table<TRIP_HISTORY> TRIP_HISTORies
		{
			get
			{
				return this.GetTable<TRIP_HISTORY>();
			}
		}
		
		public System.Data.Linq.Table<COORDINATE> COORDINATEs
		{
			get
			{
				return this.GetTable<COORDINATE>();
			}
		}
		
		public System.Data.Linq.Table<COORDINATE_ROAD> COORDINATE_ROADs
		{
			get
			{
				return this.GetTable<COORDINATE_ROAD>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<LINE> LINEs
		{
			get
			{
				return this.GetTable<LINE>();
			}
		}
		
		public System.Data.Linq.Table<ROAD> ROADs
		{
			get
			{
				return this.GetTable<ROAD>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
		
		public System.Data.Linq.Table<TRIP> TRIPs
		{
			get
			{
				return this.GetTable<TRIP>();
			}
		}
		
		public System.Data.Linq.Table<TICKET> TICKETs
		{
			get
			{
				return this.GetTable<TICKET>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BUS")]
	public partial class BUS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_BUS;
		
		private string _NUMBERPLACES;
		
		private string _RANGEOFVEHICLE;
		
		private System.Nullable<int> _YEAROFMANUFACTURE;
		
		private string _ID_LINE;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<TRIP> _TRIPs;
		
		private EntityRef<LINE> _LINE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BUSChanging(string value);
    partial void OnID_BUSChanged();
    partial void OnNUMBERPLACESChanging(string value);
    partial void OnNUMBERPLACESChanged();
    partial void OnRANGEOFVEHICLEChanging(string value);
    partial void OnRANGEOFVEHICLEChanged();
    partial void OnYEAROFMANUFACTUREChanging(System.Nullable<int> value);
    partial void OnYEAROFMANUFACTUREChanged();
    partial void OnID_LINEChanging(string value);
    partial void OnID_LINEChanged();
    #endregion
		
		public BUS()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._TRIPs = new EntitySet<TRIP>(new Action<TRIP>(this.attach_TRIPs), new Action<TRIP>(this.detach_TRIPs));
			this._LINE = default(EntityRef<LINE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BUS", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_BUS
		{
			get
			{
				return this._ID_BUS;
			}
			set
			{
				if ((this._ID_BUS != value))
				{
					this.OnID_BUSChanging(value);
					this.SendPropertyChanging();
					this._ID_BUS = value;
					this.SendPropertyChanged("ID_BUS");
					this.OnID_BUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMBERPLACES", DbType="NVarChar(15)")]
		public string NUMBERPLACES
		{
			get
			{
				return this._NUMBERPLACES;
			}
			set
			{
				if ((this._NUMBERPLACES != value))
				{
					this.OnNUMBERPLACESChanging(value);
					this.SendPropertyChanging();
					this._NUMBERPLACES = value;
					this.SendPropertyChanged("NUMBERPLACES");
					this.OnNUMBERPLACESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RANGEOFVEHICLE", DbType="NVarChar(30)")]
		public string RANGEOFVEHICLE
		{
			get
			{
				return this._RANGEOFVEHICLE;
			}
			set
			{
				if ((this._RANGEOFVEHICLE != value))
				{
					this.OnRANGEOFVEHICLEChanging(value);
					this.SendPropertyChanging();
					this._RANGEOFVEHICLE = value;
					this.SendPropertyChanged("RANGEOFVEHICLE");
					this.OnRANGEOFVEHICLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YEAROFMANUFACTURE", DbType="Int")]
		public System.Nullable<int> YEAROFMANUFACTURE
		{
			get
			{
				return this._YEAROFMANUFACTURE;
			}
			set
			{
				if ((this._YEAROFMANUFACTURE != value))
				{
					this.OnYEAROFMANUFACTUREChanging(value);
					this.SendPropertyChanging();
					this._YEAROFMANUFACTURE = value;
					this.SendPropertyChanged("YEAROFMANUFACTURE");
					this.OnYEAROFMANUFACTUREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LINE", DbType="NVarChar(10)")]
		public string ID_LINE
		{
			get
			{
				return this._ID_LINE;
			}
			set
			{
				if ((this._ID_LINE != value))
				{
					if (this._LINE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LINEChanging(value);
					this.SendPropertyChanging();
					this._ID_LINE = value;
					this.SendPropertyChanged("ID_LINE");
					this.OnID_LINEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BUS_CUSTOMER", Storage="_CUSTOMERs", ThisKey="ID_BUS", OtherKey="ID_BUS")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BUS_TRIP", Storage="_TRIPs", ThisKey="ID_BUS", OtherKey="ID_BUS")]
		public EntitySet<TRIP> TRIPs
		{
			get
			{
				return this._TRIPs;
			}
			set
			{
				this._TRIPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINE_BUS", Storage="_LINE", ThisKey="ID_LINE", OtherKey="ID_LINE", IsForeignKey=true)]
		public LINE LINE
		{
			get
			{
				return this._LINE.Entity;
			}
			set
			{
				LINE previousValue = this._LINE.Entity;
				if (((previousValue != value) 
							|| (this._LINE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LINE.Entity = null;
						previousValue.BUS.Remove(this);
					}
					this._LINE.Entity = value;
					if ((value != null))
					{
						value.BUS.Add(this);
						this._ID_LINE = value.ID_LINE;
					}
					else
					{
						this._ID_LINE = default(string);
					}
					this.SendPropertyChanged("LINE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.BUS = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.BUS = null;
		}
		
		private void attach_TRIPs(TRIP entity)
		{
			this.SendPropertyChanging();
			entity.BUS = this;
		}
		
		private void detach_TRIPs(TRIP entity)
		{
			this.SendPropertyChanging();
			entity.BUS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRIP_HISTORY")]
	public partial class TRIP_HISTORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _DATE_HISTORY;
		
		private string _TIME_VIOLATION;
		
		private string _VELOCITY_VIOLATION;
		
		private string _ROAD_VIOLATION;
		
		private string _AVERAGEVELOCITY;
		
		private string _DEPARTURE_TIME;
		
		private EntityRef<TRIP> _TRIP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDATE_HISTORYChanging(System.DateTime value);
    partial void OnDATE_HISTORYChanged();
    partial void OnTIME_VIOLATIONChanging(string value);
    partial void OnTIME_VIOLATIONChanged();
    partial void OnVELOCITY_VIOLATIONChanging(string value);
    partial void OnVELOCITY_VIOLATIONChanged();
    partial void OnROAD_VIOLATIONChanging(string value);
    partial void OnROAD_VIOLATIONChanged();
    partial void OnAVERAGEVELOCITYChanging(string value);
    partial void OnAVERAGEVELOCITYChanged();
    partial void OnDEPARTURE_TIMEChanging(string value);
    partial void OnDEPARTURE_TIMEChanged();
    #endregion
		
		public TRIP_HISTORY()
		{
			this._TRIP = default(EntityRef<TRIP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_HISTORY", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DATE_HISTORY
		{
			get
			{
				return this._DATE_HISTORY;
			}
			set
			{
				if ((this._DATE_HISTORY != value))
				{
					this.OnDATE_HISTORYChanging(value);
					this.SendPropertyChanging();
					this._DATE_HISTORY = value;
					this.SendPropertyChanged("DATE_HISTORY");
					this.OnDATE_HISTORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIME_VIOLATION", DbType="NVarChar(20)")]
		public string TIME_VIOLATION
		{
			get
			{
				return this._TIME_VIOLATION;
			}
			set
			{
				if ((this._TIME_VIOLATION != value))
				{
					this.OnTIME_VIOLATIONChanging(value);
					this.SendPropertyChanging();
					this._TIME_VIOLATION = value;
					this.SendPropertyChanged("TIME_VIOLATION");
					this.OnTIME_VIOLATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VELOCITY_VIOLATION", DbType="NVarChar(20)")]
		public string VELOCITY_VIOLATION
		{
			get
			{
				return this._VELOCITY_VIOLATION;
			}
			set
			{
				if ((this._VELOCITY_VIOLATION != value))
				{
					this.OnVELOCITY_VIOLATIONChanging(value);
					this.SendPropertyChanging();
					this._VELOCITY_VIOLATION = value;
					this.SendPropertyChanged("VELOCITY_VIOLATION");
					this.OnVELOCITY_VIOLATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROAD_VIOLATION", DbType="NVarChar(20)")]
		public string ROAD_VIOLATION
		{
			get
			{
				return this._ROAD_VIOLATION;
			}
			set
			{
				if ((this._ROAD_VIOLATION != value))
				{
					this.OnROAD_VIOLATIONChanging(value);
					this.SendPropertyChanging();
					this._ROAD_VIOLATION = value;
					this.SendPropertyChanged("ROAD_VIOLATION");
					this.OnROAD_VIOLATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVERAGEVELOCITY", DbType="NVarChar(10)")]
		public string AVERAGEVELOCITY
		{
			get
			{
				return this._AVERAGEVELOCITY;
			}
			set
			{
				if ((this._AVERAGEVELOCITY != value))
				{
					this.OnAVERAGEVELOCITYChanging(value);
					this.SendPropertyChanging();
					this._AVERAGEVELOCITY = value;
					this.SendPropertyChanged("AVERAGEVELOCITY");
					this.OnAVERAGEVELOCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTURE_TIME", DbType="NVarChar(10)")]
		public string DEPARTURE_TIME
		{
			get
			{
				return this._DEPARTURE_TIME;
			}
			set
			{
				if ((this._DEPARTURE_TIME != value))
				{
					if (this._TRIP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEPARTURE_TIMEChanging(value);
					this.SendPropertyChanging();
					this._DEPARTURE_TIME = value;
					this.SendPropertyChanged("DEPARTURE_TIME");
					this.OnDEPARTURE_TIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRIP_TRIP_HISTORY", Storage="_TRIP", ThisKey="DEPARTURE_TIME", OtherKey="DEPARTURE_TIME", IsForeignKey=true)]
		public TRIP TRIP
		{
			get
			{
				return this._TRIP.Entity;
			}
			set
			{
				TRIP previousValue = this._TRIP.Entity;
				if (((previousValue != value) 
							|| (this._TRIP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRIP.Entity = null;
						previousValue.TRIP_HISTORies.Remove(this);
					}
					this._TRIP.Entity = value;
					if ((value != null))
					{
						value.TRIP_HISTORies.Add(this);
						this._DEPARTURE_TIME = value.DEPARTURE_TIME;
					}
					else
					{
						this._DEPARTURE_TIME = default(string);
					}
					this.SendPropertyChanged("TRIP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COORDINATE")]
	public partial class COORDINATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<decimal> _LONGITUDE;
		
		private System.Nullable<decimal> _LATITUDE;
		
		private string _STREET_NAME;
		
		private string _PROVINCE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnLONGITUDEChanging(System.Nullable<decimal> value);
    partial void OnLONGITUDEChanged();
    partial void OnLATITUDEChanging(System.Nullable<decimal> value);
    partial void OnLATITUDEChanged();
    partial void OnSTREET_NAMEChanging(string value);
    partial void OnSTREET_NAMEChanged();
    partial void OnPROVINCEChanging(string value);
    partial void OnPROVINCEChanged();
    #endregion
		
		public COORDINATE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LONGITUDE", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> LONGITUDE
		{
			get
			{
				return this._LONGITUDE;
			}
			set
			{
				if ((this._LONGITUDE != value))
				{
					this.OnLONGITUDEChanging(value);
					this.SendPropertyChanging();
					this._LONGITUDE = value;
					this.SendPropertyChanged("LONGITUDE");
					this.OnLONGITUDEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LATITUDE", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> LATITUDE
		{
			get
			{
				return this._LATITUDE;
			}
			set
			{
				if ((this._LATITUDE != value))
				{
					this.OnLATITUDEChanging(value);
					this.SendPropertyChanging();
					this._LATITUDE = value;
					this.SendPropertyChanged("LATITUDE");
					this.OnLATITUDEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_NAME", DbType="NVarChar(30)")]
		public string STREET_NAME
		{
			get
			{
				return this._STREET_NAME;
			}
			set
			{
				if ((this._STREET_NAME != value))
				{
					this.OnSTREET_NAMEChanging(value);
					this.SendPropertyChanging();
					this._STREET_NAME = value;
					this.SendPropertyChanged("STREET_NAME");
					this.OnSTREET_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVINCE", DbType="NVarChar(20)")]
		public string PROVINCE
		{
			get
			{
				return this._PROVINCE;
			}
			set
			{
				if ((this._PROVINCE != value))
				{
					this.OnPROVINCEChanging(value);
					this.SendPropertyChanging();
					this._PROVINCE = value;
					this.SendPropertyChanged("PROVINCE");
					this.OnPROVINCEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COORDINATE_ROAD")]
	public partial class COORDINATE_ROAD
	{
		
		private string _ID;
		
		private string _ID_ROAD;
		
		private string _INTERVAL;
		
		private string _LOCATION;
		
		public COORDINATE_ROAD()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(5)")]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ROAD", DbType="NVarChar(10)")]
		public string ID_ROAD
		{
			get
			{
				return this._ID_ROAD;
			}
			set
			{
				if ((this._ID_ROAD != value))
				{
					this._ID_ROAD = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INTERVAL", DbType="NVarChar(10)")]
		public string INTERVAL
		{
			get
			{
				return this._INTERVAL;
			}
			set
			{
				if ((this._INTERVAL != value))
				{
					this._INTERVAL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION", DbType="NVarChar(20)")]
		public string LOCATION
		{
			get
			{
				return this._LOCATION;
			}
			set
			{
				if ((this._LOCATION != value))
				{
					this._LOCATION = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_USER;
		
		private string _NAME;
		
		private string _SEX;
		
		private System.Nullable<System.DateTime> _DATEOFBIRTH;
		
		private string _JOB;
		
		private string _ID_BUS;
		
		private EntitySet<TICKET> _TICKETs;
		
		private EntityRef<BUS> _BUS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_USERChanging(int value);
    partial void OnID_USERChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSEXChanging(string value);
    partial void OnSEXChanged();
    partial void OnDATEOFBIRTHChanging(System.Nullable<System.DateTime> value);
    partial void OnDATEOFBIRTHChanged();
    partial void OnJOBChanging(string value);
    partial void OnJOBChanged();
    partial void OnID_BUSChanging(string value);
    partial void OnID_BUSChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._TICKETs = new EntitySet<TICKET>(new Action<TICKET>(this.attach_TICKETs), new Action<TICKET>(this.detach_TICKETs));
			this._BUS = default(EntityRef<BUS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_USER", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_USER
		{
			get
			{
				return this._ID_USER;
			}
			set
			{
				if ((this._ID_USER != value))
				{
					this.OnID_USERChanging(value);
					this.SendPropertyChanging();
					this._ID_USER = value;
					this.SendPropertyChanged("ID_USER");
					this.OnID_USERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(30)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SEX", DbType="Char(6)")]
		public string SEX
		{
			get
			{
				return this._SEX;
			}
			set
			{
				if ((this._SEX != value))
				{
					this.OnSEXChanging(value);
					this.SendPropertyChanging();
					this._SEX = value;
					this.SendPropertyChanged("SEX");
					this.OnSEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFBIRTH", DbType="Date")]
		public System.Nullable<System.DateTime> DATEOFBIRTH
		{
			get
			{
				return this._DATEOFBIRTH;
			}
			set
			{
				if ((this._DATEOFBIRTH != value))
				{
					this.OnDATEOFBIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATEOFBIRTH = value;
					this.SendPropertyChanged("DATEOFBIRTH");
					this.OnDATEOFBIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JOB", DbType="NVarChar(10)")]
		public string JOB
		{
			get
			{
				return this._JOB;
			}
			set
			{
				if ((this._JOB != value))
				{
					this.OnJOBChanging(value);
					this.SendPropertyChanging();
					this._JOB = value;
					this.SendPropertyChanged("JOB");
					this.OnJOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BUS", DbType="NVarChar(5)")]
		public string ID_BUS
		{
			get
			{
				return this._ID_BUS;
			}
			set
			{
				if ((this._ID_BUS != value))
				{
					if (this._BUS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BUSChanging(value);
					this.SendPropertyChanging();
					this._ID_BUS = value;
					this.SendPropertyChanged("ID_BUS");
					this.OnID_BUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TICKET", Storage="_TICKETs", ThisKey="ID_USER", OtherKey="ID_USER")]
		public EntitySet<TICKET> TICKETs
		{
			get
			{
				return this._TICKETs;
			}
			set
			{
				this._TICKETs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BUS_CUSTOMER", Storage="_BUS", ThisKey="ID_BUS", OtherKey="ID_BUS", IsForeignKey=true)]
		public BUS BUS
		{
			get
			{
				return this._BUS.Entity;
			}
			set
			{
				BUS previousValue = this._BUS.Entity;
				if (((previousValue != value) 
							|| (this._BUS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BUS.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._BUS.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._ID_BUS = value.ID_BUS;
					}
					else
					{
						this._ID_BUS = default(string);
					}
					this.SendPropertyChanged("BUS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TICKETs(TICKET entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_TICKETs(TICKET entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LINE")]
	public partial class LINE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_LINE;
		
		private string _LINE_NAME;
		
		private System.Nullable<double> _HEADWAY;
		
		private string _ADMINISTRATIVE;
		
		private EntitySet<BUS> _BUS;
		
		private EntitySet<ROAD> _ROADs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LINEChanging(string value);
    partial void OnID_LINEChanged();
    partial void OnLINE_NAMEChanging(string value);
    partial void OnLINE_NAMEChanged();
    partial void OnHEADWAYChanging(System.Nullable<double> value);
    partial void OnHEADWAYChanged();
    partial void OnADMINISTRATIVEChanging(string value);
    partial void OnADMINISTRATIVEChanged();
    #endregion
		
		public LINE()
		{
			this._BUS = new EntitySet<BUS>(new Action<BUS>(this.attach_BUS), new Action<BUS>(this.detach_BUS));
			this._ROADs = new EntitySet<ROAD>(new Action<ROAD>(this.attach_ROADs), new Action<ROAD>(this.detach_ROADs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LINE", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_LINE
		{
			get
			{
				return this._ID_LINE;
			}
			set
			{
				if ((this._ID_LINE != value))
				{
					this.OnID_LINEChanging(value);
					this.SendPropertyChanging();
					this._ID_LINE = value;
					this.SendPropertyChanged("ID_LINE");
					this.OnID_LINEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINE_NAME", DbType="NVarChar(150)")]
		public string LINE_NAME
		{
			get
			{
				return this._LINE_NAME;
			}
			set
			{
				if ((this._LINE_NAME != value))
				{
					this.OnLINE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LINE_NAME = value;
					this.SendPropertyChanged("LINE_NAME");
					this.OnLINE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEADWAY", DbType="Float")]
		public System.Nullable<double> HEADWAY
		{
			get
			{
				return this._HEADWAY;
			}
			set
			{
				if ((this._HEADWAY != value))
				{
					this.OnHEADWAYChanging(value);
					this.SendPropertyChanging();
					this._HEADWAY = value;
					this.SendPropertyChanged("HEADWAY");
					this.OnHEADWAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADMINISTRATIVE", DbType="NVarChar(20)")]
		public string ADMINISTRATIVE
		{
			get
			{
				return this._ADMINISTRATIVE;
			}
			set
			{
				if ((this._ADMINISTRATIVE != value))
				{
					this.OnADMINISTRATIVEChanging(value);
					this.SendPropertyChanging();
					this._ADMINISTRATIVE = value;
					this.SendPropertyChanged("ADMINISTRATIVE");
					this.OnADMINISTRATIVEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINE_BUS", Storage="_BUS", ThisKey="ID_LINE", OtherKey="ID_LINE")]
		public EntitySet<BUS> BUS
		{
			get
			{
				return this._BUS;
			}
			set
			{
				this._BUS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINE_ROAD", Storage="_ROADs", ThisKey="ID_LINE", OtherKey="ID_LINE")]
		public EntitySet<ROAD> ROADs
		{
			get
			{
				return this._ROADs;
			}
			set
			{
				this._ROADs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BUS(BUS entity)
		{
			this.SendPropertyChanging();
			entity.LINE = this;
		}
		
		private void detach_BUS(BUS entity)
		{
			this.SendPropertyChanging();
			entity.LINE = null;
		}
		
		private void attach_ROADs(ROAD entity)
		{
			this.SendPropertyChanging();
			entity.LINE = this;
		}
		
		private void detach_ROADs(ROAD entity)
		{
			this.SendPropertyChanging();
			entity.LINE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROAD")]
	public partial class ROAD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_ROAD;
		
		private string _AVERAGEVELOCITY;
		
		private string _ID_LINE;
		
		private EntitySet<TRIP> _TRIPs;
		
		private EntityRef<LINE> _LINE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ROADChanging(string value);
    partial void OnID_ROADChanged();
    partial void OnAVERAGEVELOCITYChanging(string value);
    partial void OnAVERAGEVELOCITYChanged();
    partial void OnID_LINEChanging(string value);
    partial void OnID_LINEChanged();
    #endregion
		
		public ROAD()
		{
			this._TRIPs = new EntitySet<TRIP>(new Action<TRIP>(this.attach_TRIPs), new Action<TRIP>(this.detach_TRIPs));
			this._LINE = default(EntityRef<LINE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ROAD", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_ROAD
		{
			get
			{
				return this._ID_ROAD;
			}
			set
			{
				if ((this._ID_ROAD != value))
				{
					this.OnID_ROADChanging(value);
					this.SendPropertyChanging();
					this._ID_ROAD = value;
					this.SendPropertyChanged("ID_ROAD");
					this.OnID_ROADChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVERAGEVELOCITY", DbType="NVarChar(10)")]
		public string AVERAGEVELOCITY
		{
			get
			{
				return this._AVERAGEVELOCITY;
			}
			set
			{
				if ((this._AVERAGEVELOCITY != value))
				{
					this.OnAVERAGEVELOCITYChanging(value);
					this.SendPropertyChanging();
					this._AVERAGEVELOCITY = value;
					this.SendPropertyChanged("AVERAGEVELOCITY");
					this.OnAVERAGEVELOCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LINE", DbType="NVarChar(10)")]
		public string ID_LINE
		{
			get
			{
				return this._ID_LINE;
			}
			set
			{
				if ((this._ID_LINE != value))
				{
					if (this._LINE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LINEChanging(value);
					this.SendPropertyChanging();
					this._ID_LINE = value;
					this.SendPropertyChanged("ID_LINE");
					this.OnID_LINEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROAD_TRIP", Storage="_TRIPs", ThisKey="ID_ROAD", OtherKey="ID_ROAD")]
		public EntitySet<TRIP> TRIPs
		{
			get
			{
				return this._TRIPs;
			}
			set
			{
				this._TRIPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINE_ROAD", Storage="_LINE", ThisKey="ID_LINE", OtherKey="ID_LINE", IsForeignKey=true)]
		public LINE LINE
		{
			get
			{
				return this._LINE.Entity;
			}
			set
			{
				LINE previousValue = this._LINE.Entity;
				if (((previousValue != value) 
							|| (this._LINE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LINE.Entity = null;
						previousValue.ROADs.Remove(this);
					}
					this._LINE.Entity = value;
					if ((value != null))
					{
						value.ROADs.Add(this);
						this._ID_LINE = value.ID_LINE;
					}
					else
					{
						this._ID_LINE = default(string);
					}
					this.SendPropertyChanged("LINE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TRIPs(TRIP entity)
		{
			this.SendPropertyChanging();
			entity.ROAD = this;
		}
		
		private void detach_TRIPs(TRIP entity)
		{
			this.SendPropertyChanging();
			entity.ROAD = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFF")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_STAFF;
		
		private string _NAME;
		
		private System.Nullable<System.DateTime> _DATEOFBIRTH;
		
		private string _SEX;
		
		private string _POSITION;
		
		private string _ADDRES;
		
		private EntitySet<TICKET> _TICKETs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_STAFFChanging(string value);
    partial void OnID_STAFFChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnDATEOFBIRTHChanging(System.Nullable<System.DateTime> value);
    partial void OnDATEOFBIRTHChanged();
    partial void OnSEXChanging(string value);
    partial void OnSEXChanged();
    partial void OnPOSITIONChanging(string value);
    partial void OnPOSITIONChanged();
    partial void OnADDRESChanging(string value);
    partial void OnADDRESChanged();
    #endregion
		
		public STAFF()
		{
			this._TICKETs = new EntitySet<TICKET>(new Action<TICKET>(this.attach_TICKETs), new Action<TICKET>(this.detach_TICKETs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_STAFF", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_STAFF
		{
			get
			{
				return this._ID_STAFF;
			}
			set
			{
				if ((this._ID_STAFF != value))
				{
					this.OnID_STAFFChanging(value);
					this.SendPropertyChanging();
					this._ID_STAFF = value;
					this.SendPropertyChanged("ID_STAFF");
					this.OnID_STAFFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(30)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFBIRTH", DbType="Date")]
		public System.Nullable<System.DateTime> DATEOFBIRTH
		{
			get
			{
				return this._DATEOFBIRTH;
			}
			set
			{
				if ((this._DATEOFBIRTH != value))
				{
					this.OnDATEOFBIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATEOFBIRTH = value;
					this.SendPropertyChanged("DATEOFBIRTH");
					this.OnDATEOFBIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SEX", DbType="Char(7)")]
		public string SEX
		{
			get
			{
				return this._SEX;
			}
			set
			{
				if ((this._SEX != value))
				{
					this.OnSEXChanging(value);
					this.SendPropertyChanging();
					this._SEX = value;
					this.SendPropertyChanged("SEX");
					this.OnSEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSITION", DbType="NVarChar(30)")]
		public string POSITION
		{
			get
			{
				return this._POSITION;
			}
			set
			{
				if ((this._POSITION != value))
				{
					this.OnPOSITIONChanging(value);
					this.SendPropertyChanging();
					this._POSITION = value;
					this.SendPropertyChanged("POSITION");
					this.OnPOSITIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRES", DbType="NVarChar(150)")]
		public string ADDRES
		{
			get
			{
				return this._ADDRES;
			}
			set
			{
				if ((this._ADDRES != value))
				{
					this.OnADDRESChanging(value);
					this.SendPropertyChanging();
					this._ADDRES = value;
					this.SendPropertyChanged("ADDRES");
					this.OnADDRESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_TICKET", Storage="_TICKETs", ThisKey="ID_STAFF", OtherKey="ID_STAFF")]
		public EntitySet<TICKET> TICKETs
		{
			get
			{
				return this._TICKETs;
			}
			set
			{
				this._TICKETs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TICKETs(TICKET entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_TICKETs(TICKET entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRIP")]
	public partial class TRIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DEPARTURE_TIME;
		
		private string _DESTINATION_TIME;
		
		private string _ID_ROAD;
		
		private string _ID_BUS;
		
		private EntitySet<TRIP_HISTORY> _TRIP_HISTORies;
		
		private EntityRef<BUS> _BUS;
		
		private EntityRef<ROAD> _ROAD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEPARTURE_TIMEChanging(string value);
    partial void OnDEPARTURE_TIMEChanged();
    partial void OnDESTINATION_TIMEChanging(string value);
    partial void OnDESTINATION_TIMEChanged();
    partial void OnID_ROADChanging(string value);
    partial void OnID_ROADChanged();
    partial void OnID_BUSChanging(string value);
    partial void OnID_BUSChanged();
    #endregion
		
		public TRIP()
		{
			this._TRIP_HISTORies = new EntitySet<TRIP_HISTORY>(new Action<TRIP_HISTORY>(this.attach_TRIP_HISTORies), new Action<TRIP_HISTORY>(this.detach_TRIP_HISTORies));
			this._BUS = default(EntityRef<BUS>);
			this._ROAD = default(EntityRef<ROAD>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTURE_TIME", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DEPARTURE_TIME
		{
			get
			{
				return this._DEPARTURE_TIME;
			}
			set
			{
				if ((this._DEPARTURE_TIME != value))
				{
					this.OnDEPARTURE_TIMEChanging(value);
					this.SendPropertyChanging();
					this._DEPARTURE_TIME = value;
					this.SendPropertyChanged("DEPARTURE_TIME");
					this.OnDEPARTURE_TIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESTINATION_TIME", DbType="NVarChar(10)")]
		public string DESTINATION_TIME
		{
			get
			{
				return this._DESTINATION_TIME;
			}
			set
			{
				if ((this._DESTINATION_TIME != value))
				{
					this.OnDESTINATION_TIMEChanging(value);
					this.SendPropertyChanging();
					this._DESTINATION_TIME = value;
					this.SendPropertyChanged("DESTINATION_TIME");
					this.OnDESTINATION_TIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ROAD", DbType="NVarChar(10)")]
		public string ID_ROAD
		{
			get
			{
				return this._ID_ROAD;
			}
			set
			{
				if ((this._ID_ROAD != value))
				{
					if (this._ROAD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ROADChanging(value);
					this.SendPropertyChanging();
					this._ID_ROAD = value;
					this.SendPropertyChanged("ID_ROAD");
					this.OnID_ROADChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BUS", DbType="NVarChar(5)")]
		public string ID_BUS
		{
			get
			{
				return this._ID_BUS;
			}
			set
			{
				if ((this._ID_BUS != value))
				{
					if (this._BUS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BUSChanging(value);
					this.SendPropertyChanging();
					this._ID_BUS = value;
					this.SendPropertyChanged("ID_BUS");
					this.OnID_BUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRIP_TRIP_HISTORY", Storage="_TRIP_HISTORies", ThisKey="DEPARTURE_TIME", OtherKey="DEPARTURE_TIME")]
		public EntitySet<TRIP_HISTORY> TRIP_HISTORies
		{
			get
			{
				return this._TRIP_HISTORies;
			}
			set
			{
				this._TRIP_HISTORies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BUS_TRIP", Storage="_BUS", ThisKey="ID_BUS", OtherKey="ID_BUS", IsForeignKey=true)]
		public BUS BUS
		{
			get
			{
				return this._BUS.Entity;
			}
			set
			{
				BUS previousValue = this._BUS.Entity;
				if (((previousValue != value) 
							|| (this._BUS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BUS.Entity = null;
						previousValue.TRIPs.Remove(this);
					}
					this._BUS.Entity = value;
					if ((value != null))
					{
						value.TRIPs.Add(this);
						this._ID_BUS = value.ID_BUS;
					}
					else
					{
						this._ID_BUS = default(string);
					}
					this.SendPropertyChanged("BUS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROAD_TRIP", Storage="_ROAD", ThisKey="ID_ROAD", OtherKey="ID_ROAD", IsForeignKey=true)]
		public ROAD ROAD
		{
			get
			{
				return this._ROAD.Entity;
			}
			set
			{
				ROAD previousValue = this._ROAD.Entity;
				if (((previousValue != value) 
							|| (this._ROAD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROAD.Entity = null;
						previousValue.TRIPs.Remove(this);
					}
					this._ROAD.Entity = value;
					if ((value != null))
					{
						value.TRIPs.Add(this);
						this._ID_ROAD = value.ID_ROAD;
					}
					else
					{
						this._ID_ROAD = default(string);
					}
					this.SendPropertyChanged("ROAD");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TRIP_HISTORies(TRIP_HISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TRIP = this;
		}
		
		private void detach_TRIP_HISTORies(TRIP_HISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TRIP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TICKET")]
	public partial class TICKET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TICKET;
		
		private string _TICKETTYPE;
		
		private string _FARE;
		
		private System.Nullable<System.DateTime> _DEPARTURE_DAY;
		
		private System.Nullable<int> _ID_USER;
		
		private string _ID_STAFF;
		
		private EntityRef<STAFF> _STAFF;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TICKETChanging(int value);
    partial void OnID_TICKETChanged();
    partial void OnTICKETTYPEChanging(string value);
    partial void OnTICKETTYPEChanged();
    partial void OnFAREChanging(string value);
    partial void OnFAREChanged();
    partial void OnDEPARTURE_DAYChanging(System.Nullable<System.DateTime> value);
    partial void OnDEPARTURE_DAYChanged();
    partial void OnID_USERChanging(System.Nullable<int> value);
    partial void OnID_USERChanged();
    partial void OnID_STAFFChanging(string value);
    partial void OnID_STAFFChanged();
    #endregion
		
		public TICKET()
		{
			this._STAFF = default(EntityRef<STAFF>);
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TICKET", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_TICKET
		{
			get
			{
				return this._ID_TICKET;
			}
			set
			{
				if ((this._ID_TICKET != value))
				{
					this.OnID_TICKETChanging(value);
					this.SendPropertyChanging();
					this._ID_TICKET = value;
					this.SendPropertyChanged("ID_TICKET");
					this.OnID_TICKETChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TICKETTYPE", DbType="NVarChar(10)")]
		public string TICKETTYPE
		{
			get
			{
				return this._TICKETTYPE;
			}
			set
			{
				if ((this._TICKETTYPE != value))
				{
					this.OnTICKETTYPEChanging(value);
					this.SendPropertyChanging();
					this._TICKETTYPE = value;
					this.SendPropertyChanged("TICKETTYPE");
					this.OnTICKETTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FARE", DbType="NVarChar(10)")]
		public string FARE
		{
			get
			{
				return this._FARE;
			}
			set
			{
				if ((this._FARE != value))
				{
					this.OnFAREChanging(value);
					this.SendPropertyChanging();
					this._FARE = value;
					this.SendPropertyChanged("FARE");
					this.OnFAREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPARTURE_DAY", DbType="Date")]
		public System.Nullable<System.DateTime> DEPARTURE_DAY
		{
			get
			{
				return this._DEPARTURE_DAY;
			}
			set
			{
				if ((this._DEPARTURE_DAY != value))
				{
					this.OnDEPARTURE_DAYChanging(value);
					this.SendPropertyChanging();
					this._DEPARTURE_DAY = value;
					this.SendPropertyChanged("DEPARTURE_DAY");
					this.OnDEPARTURE_DAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_USER", DbType="Int")]
		public System.Nullable<int> ID_USER
		{
			get
			{
				return this._ID_USER;
			}
			set
			{
				if ((this._ID_USER != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_USERChanging(value);
					this.SendPropertyChanging();
					this._ID_USER = value;
					this.SendPropertyChanged("ID_USER");
					this.OnID_USERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_STAFF", DbType="NVarChar(5)")]
		public string ID_STAFF
		{
			get
			{
				return this._ID_STAFF;
			}
			set
			{
				if ((this._ID_STAFF != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_STAFFChanging(value);
					this.SendPropertyChanging();
					this._ID_STAFF = value;
					this.SendPropertyChanged("ID_STAFF");
					this.OnID_STAFFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_TICKET", Storage="_STAFF", ThisKey="ID_STAFF", OtherKey="ID_STAFF", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.TICKETs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.TICKETs.Add(this);
						this._ID_STAFF = value.ID_STAFF;
					}
					else
					{
						this._ID_STAFF = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TICKET", Storage="_CUSTOMER", ThisKey="ID_USER", OtherKey="ID_USER", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.TICKETs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.TICKETs.Add(this);
						this._ID_USER = value.ID_USER;
					}
					else
					{
						this._ID_USER = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
